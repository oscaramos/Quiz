{"version":3,"sources":["redux/quiz/quiz.constants.js","redux/quiz/quiz.actions.js","redux/quiz/quiz.selectors.js","component/question/question.utils.js","component/question/question.component.jsx","component/questions-page/questions-page.jsx","component/results-page/results.component.jsx","App.js","serviceWorker.js","redux/quiz/quiz.utils.js","redux/quiz/quiz.reducer.js","redux/root.reducer.js","redux/store.js","index.js"],"names":["quizConstants","requestQuiz","dispatch","type","fetch","then","res","json","data","payload","catch","error","onCorrectAnswer","onWrongAnswer","resetQuiz","selectQuiz","state","quiz","selectQuizResults","createSelector","results","selectQuizCurrentQuestion","currentQuestion","selectQuizCorrectAnswers","correctAnswers","selectQuizResultsLength","length","shuffleAnswers","time","pending","correct_answer","incorrect_answers","a","i","j","Math","floor","random","shuffle","concat","handleAnswerClick","answer","connect","props","question","answers","console","log","className","map","idx","key","onClick","mapStateToProps","createStructuredSelector","resultsLength","onEndQuiz","ResultsPage","onStartQuiz","App","startQuiz","setState","started","endQuiz","onResetQuiz","onRequestQuiz","this","React","Component","Boolean","window","location","hostname","match","entities","Entities","decodeQuestions","result","decode","nextQuestion","incrementCorrectAnswers","INITIAL_STATE","quizReducer","action","combineReducers","middleware","thunk","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.87d777d0.chunk.js","sourcesContent":["export const quizConstants = {\r\n  REQUEST_QUIZ_PENDING: \"REQUEST_QUIZ_PENDING\",\r\n  REQUEST_QUIZ_SUCCESS: \"REQUEST_QUIZ_SUCCESS\",\r\n  REQUEST_QUIZ_FAILED: \"REQUEST_QUIZ_FAILED\",\r\n\r\n  ON_CORRECT_ANSWER: \"ON_CORRECT_ANSWER\",\r\n  ON_WRONG_ANSWER: \"ON_WRONG_ANSWER\",\r\n\r\n  RESET_QUIZ: \"RESET_QUIZ\"\r\n}\r\n","import { quizConstants } from './quiz.constants'\r\n\r\nexport const requestQuiz = (dispatch) => {\r\n  dispatch({ type: quizConstants.REQUEST_QUIZ_PENDING});\r\n  fetch('https://opentdb.com/api.php?amount=10&type=multiple')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: quizConstants.REQUEST_QUIZ_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({ type: quizConstants.REQUEST_QUIZ_FAILED, payload: error}))\r\n}\r\n\r\nexport const onCorrectAnswer = {\r\n  type: quizConstants.ON_CORRECT_ANSWER\r\n}\r\n\r\nexport const onWrongAnswer = {\r\n  type: quizConstants.ON_WRONG_ANSWER\r\n}\r\n\r\nexport const resetQuiz = {\r\n  type: quizConstants.RESET_QUIZ\r\n}","import { createSelector } from 'reselect';\r\n\r\nconst selectQuiz = state => state.quiz;\r\n\r\nexport const selectQuizResults = createSelector(\r\n  [selectQuiz],\r\n  state => state.results\r\n)\r\n\r\nexport const selectQuizCurrentQuestion = createSelector(\r\n  [selectQuiz],\r\n  state => state.currentQuestion\r\n)\r\n\r\nexport const selectQuizCorrectAnswers = createSelector(\r\n  [selectQuiz],\r\n  state => state.correctAnswers\r\n)\r\n\r\nexport const selectQuizResultsLength = createSelector(\r\n  [selectQuizResults],\r\n  results => results.length\r\n)\r\n\r\nexport const selectQuizTime = createSelector(\r\n  [selectQuiz],\r\n  state => state.time\r\n)\r\n\r\nexport const selectPending = createSelector(\r\n  [selectQuiz],\r\n  state => state.pending\r\n)\r\n\r\n\r\n","const shuffle = a => {\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n};\r\n\r\nexport const shuffleAnswers = (correct_answer, incorrect_answers) => {\r\n    return shuffle([correct_answer].concat(incorrect_answers));\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { onCorrectAnswer, onWrongAnswer } from \"../../redux/quiz/quiz.actions\";\r\nimport { shuffleAnswers } from './question.utils'\r\n\r\nimport './question.styles.scss';\r\n\r\nconst handleAnswerClick = (answer, {correct_answer, onCorrectAnswer, onWrongAnswer}) => () => {\r\n  if(answer === correct_answer)\r\n    onCorrectAnswer();\r\n  else\r\n    onWrongAnswer();\r\n}\r\n\r\nconst Question = (props) => {\r\n  const { question, correct_answer, incorrect_answers } = props;\r\n  const answers = shuffleAnswers(correct_answer, incorrect_answers);\r\n  console.log(`%c${correct_answer}`, \"color: lime\");\r\n\r\n  return (\r\n    <div className=\"question\">\r\n      <div className=\"question-text\">{question}</div>\r\n      <div className=\"question-answer-container\">\r\n        {\r\n          answers.map((answer, idx) =>\r\n          (<div className=\"question-answer\" key={idx} onClick={handleAnswerClick(answer, props)}>\r\n            {answer}\r\n          </div>))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onCorrectAnswer: () => dispatch(onCorrectAnswer),\r\n  onWrongAnswer: () => dispatch(onWrongAnswer),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(Question);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport {\r\n  selectQuizCorrectAnswers,\r\n  selectQuizCurrentQuestion,\r\n  selectQuizResults,\r\n  selectQuizResultsLength\r\n} from '../../redux/quiz/quiz.selectors'\r\n\r\nimport Question from '../question/question.component';\r\n\r\nimport './questions-page.scss'\r\n\r\nconst QuestionsPage = props => {\r\n  const { currentQuestion, resultsLength, onEndQuiz, correctAnswers, results} = props;\r\n\r\n  if (currentQuestion === resultsLength)\r\n    onEndQuiz();\r\n\r\n  return (\r\n    <div className='main-page'>\r\n      <div className='page-header'>\r\n        {correctAnswers + '/' + resultsLength}\r\n      </div>\r\n\r\n      <div className='page-body'>\r\n        {<Question {...results[currentQuestion]} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  results: selectQuizResults,\r\n  currentQuestion: selectQuizCurrentQuestion,\r\n  correctAnswers: selectQuizCorrectAnswers,\r\n  resultsLength: selectQuizResultsLength\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, null)(QuestionsPage);","import React from 'react';\r\n\r\nimport './results.styles.scss'\r\n\r\nconst ResultsPage = ({ onStartQuiz }) => (\r\n  <div className='results-page'>\r\n    <div className='result'>Correct answers: 3/10</div>\r\n    <div className='result'>Time: 8 minutes with 3 seconds</div>\r\n    <button className='start-button' onClick={onStartQuiz}>Start Quiz</button>\r\n  </div>\r\n);\r\n\r\nexport default ResultsPage;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { requestQuiz, resetQuiz } from './redux/quiz/quiz.actions';\n\nimport MainPage from \"./component/questions-page/questions-page\";\nimport ResultsPages from \"./component/results-page/results.component\";\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      started: false\n    };\n  }\n\n  startQuiz = () => {\n    this.setState({started: true});\n  }\n\n  endQuiz = () => {\n    this.setState({started: false});\n    this.props.onResetQuiz();\n    this.props.onRequestQuiz();\n  }\n\n  componentDidMount() {\n    this.props.onRequestQuiz();\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        {this.state.started ? <MainPage onEndQuiz={this.endQuiz}/>\n        : <ResultsPages onStartQuiz={this.startQuiz} />}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onRequestQuiz: () => dispatch(requestQuiz),\n  onResetQuiz: () => dispatch(resetQuiz)\n})\n\nexport default connect(null, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AllHtmlEntities as Entities } from 'html-entities';\r\nconst entities = new Entities();\r\n\r\nexport const decodeQuestions = results =>\r\n  results.map(result => ({\r\n    ...result,\r\n    question: entities.decode(result.question),\r\n    correct_answer: entities.decode(result.correct_answer),\r\n    incorrect_answers: result.incorrect_answers.map(answer => entities.decode(answer))\r\n  }))\r\n\r\nexport const nextQuestion = state => state.currentQuestion + 1;\r\nexport const incrementCorrectAnswers = state => state.correctAnswers + 1;","import { quizConstants } from './quiz.constants'\r\nimport { decodeQuestions, nextQuestion, incrementCorrectAnswers } from \"./quiz.utils\";\r\n\r\nconst INITIAL_STATE = {\r\n  pending: true,\r\n  currentQuestion: 0,\r\n  correctAnswers: 0,\r\n  time: 0,\r\n  results: []\r\n}\r\n\r\nconst quizReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case quizConstants.REQUEST_QUIZ_PENDING:\r\n      return { ...state, pending: true }\r\n    case quizConstants.REQUEST_QUIZ_SUCCESS:\r\n      return { ...state, pending: false, results: decodeQuestions(action.payload.results) }\r\n    case quizConstants.REQUEST_QUIZ_FAILED:\r\n      return { ...state, pending: false, error: action.payload }\r\n    case quizConstants.ON_CORRECT_ANSWER:\r\n      return {...state,currentQuestion: nextQuestion(state), correctAnswers: incrementCorrectAnswers(state)}\r\n    case quizConstants.ON_WRONG_ANSWER:\r\n      return {...state,currentQuestion: nextQuestion(state)}\r\n    case quizConstants.RESET_QUIZ:\r\n      return INITIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default quizReducer;","import { combineReducers } from 'redux'\r\nimport quizReducer from \"./quiz/quiz.reducer\";\r\n\r\nexport default combineReducers({\r\n  quiz: quizReducer\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './root.reducer';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst middleware = [thunk, logger];\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}