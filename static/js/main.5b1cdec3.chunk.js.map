{"version":3,"sources":["pages/questions/components/question/question.component.jsx","hooks/use-quiz.js","hooks/use-stats.js","pages/questions/questions.component.jsx","pages/results/results.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Question","text","answers","onClickAnswer","className","map","answer","key","onClick","entities","Entities","QuizStateContext","createContext","undefined","QuizActionsContext","decodeQuestions","questions","result","question","decode","correct_answer","incorrect_answers","actionsType","QuizProvider","children","useState","actionsHistory","setActionsHistory","useReducer","state","action","prev","type","pending","payload","Error","quizReducer","dispatch","onRequestQuiz","a","fetch","res","json","data","results","message","onStartQuiz","Provider","value","onEndQuiz","useQuizState","context","useContext","useQuizActions","actionListener","cursor","setCursor","useEffect","length","currentAction","previousAction","onResetQuiz","useQuiz","StatsContext","StatsProvider","time","setTime","correctAnswers","setCorrectAnswers","performance","now","startTime","onCorrectAnswer","useStats","getCurrentQuestion","index","questionContent","correctAnswer","incorrectAnswers","allAnswers","i","j","Math","floor","random","shuffle","concat","Questions","currentQuestionIndex","setCurrentQuestionIndex","ResultsPage","completedTimes","setCompletedTimes","showStats","millis","minutes","seconds","toFixed","millisToMinutesAndSeconds","App","started","setStarted","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5b1cdec3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./question.styles.scss\";\n\nexport default function Question({ text, answers, onClickAnswer }) {\n  return (\n    <div className=\"question\">\n      <div className=\"description\">{text}</div>\n      <div className=\"answers-container\">\n        {answers.map((answer) => (\n          <div\n            className=\"answer\"\n            key={answer}\n            onClick={() => onClickAnswer(answer)}\n          >\n            {answer}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","// thanks to https://kentcdodds.com/blog/how-to-use-react-context-effectively\n\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useReducer,\n  useState,\n} from \"react\";\nimport { AllHtmlEntities as Entities } from \"html-entities\";\n\nconst entities = new Entities();\n\nconst QuizStateContext = createContext(undefined);\nconst QuizActionsContext = createContext(undefined);\n\nconst decodeQuestions = (questions) =>\n  questions.map((result) => ({\n    ...result,\n    question: entities.decode(result.question),\n    correct_answer: entities.decode(result.correct_answer),\n    incorrect_answers: result.incorrect_answers.map((answer) =>\n      entities.decode(answer)\n    ),\n  }));\n\nexport const actionsType = {\n  resetQuiz: \"RESET_QUIZ\",\n  startQuiz: \"START_QUIZ\",\n  endQuiz: \"END_QUIZ\",\n\n  setPending: \"SET_PENDING\",\n  setQuestions: \"SET_QUESTIONS\",\n};\n\nexport function quizReducer(state, action) {\n  switch (action.type) {\n    case actionsType.resetQuiz: {\n      return {\n        pending: true,\n        questions: [],\n      };\n    }\n\n    case actionsType.startQuiz: {\n      return state;\n    }\n    case actionsType.endQuiz: {\n      return state;\n    }\n\n    case actionsType.setPending: {\n      return {\n        ...state,\n        pending: action.payload,\n      };\n    }\n    case actionsType.setQuestions: {\n      return {\n        ...state,\n        questions: action.payload,\n      };\n    }\n    default:\n      throw new Error(`Unknown action type: ${action.type}`);\n  }\n}\n\nexport function QuizProvider({ children }) {\n  const [actionsHistory, setActionsHistory] = useState([]);\n\n  const [{ pending, questions }, dispatch] = useReducer(\n    (state, action) => {\n      setActionsHistory((prev) => [...prev, action]);\n      return quizReducer(state, action);\n    },\n    {\n      pending: false,\n      questions: [],\n    }\n  );\n\n  const onRequestQuiz = async () => {\n    dispatch({ type: actionsType.setPending, payload: true });\n    try {\n      const res = await fetch(\n        \"https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple\"\n      );\n      const data = await res.json();\n      dispatch({\n        type: actionsType.setQuestions,\n        payload: decodeQuestions(data.results),\n      });\n    } catch (error) {\n      throw new Error(error.message);\n    } finally {\n      dispatch({ type: actionsType.setPending, payload: false });\n    }\n  };\n\n  const onStartQuiz = async () => {\n    dispatch({ type: actionsType.resetQuiz });\n    dispatch({ type: actionsType.startQuiz });\n    onRequestQuiz();\n  };\n\n  const onEndQuiz = () => {\n    dispatch({ type: actionsType.endQuiz });\n  };\n\n  return (\n    <QuizStateContext.Provider value={{ pending, questions }}>\n      <QuizActionsContext.Provider\n        value={{ onStartQuiz, onEndQuiz, actionsHistory }}\n      >\n        {children}\n      </QuizActionsContext.Provider>\n    </QuizStateContext.Provider>\n  );\n}\n\nfunction useQuizState() {\n  const context = useContext(QuizStateContext);\n  if (context === undefined) {\n    throw new Error(\"useQuizState must be within a QuizProvider\");\n  }\n  return context;\n}\n\nfunction useQuizActions(actionListener = {}) {\n  const context = useContext(QuizActionsContext);\n  if (context === undefined) {\n    throw new Error(\"useQuizActions must be within a QuizProvider\");\n  }\n\n  const [cursor, setCursor] = useState(0);\n\n  useEffect(() => {\n    if (context.actionsHistory.length === cursor) return;\n\n    // previousAction avoid problem about an error that can repeats actions twice\n    const currentAction = context.actionsHistory[cursor];\n    const previousAction = context.actionsHistory[cursor - 1] ?? { type: \"\" };\n\n    if (currentAction.type !== previousAction.type) {\n      switch (currentAction.type) {\n        case actionsType.startQuiz:\n          if (actionListener.onStartQuiz) {\n            actionListener.onStartQuiz();\n          }\n          break;\n        case actionsType.endQuiz:\n          if (actionListener.onEndQuiz) {\n            actionListener.onEndQuiz();\n          }\n          break;\n        case actionsType.resetQuiz:\n          if (actionListener.onResetQuiz) {\n            actionListener.onResetQuiz();\n          }\n          break;\n        default:\n      }\n    }\n\n    setCursor((prev) => prev + 1);\n  }, [actionListener, context.actionsHistory, cursor]);\n  return context;\n}\n\nexport function useQuiz(actionListener) {\n  return [useQuizState(), useQuizActions(actionListener)];\n}\n","import React, { createContext, useContext, useState } from \"react\";\nimport { useQuiz } from \"./use-quiz\";\n\nconst StatsContext = createContext(undefined);\n\nexport function StatsProvider({ children }) {\n  const [time, setTime] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  useQuiz({\n    onStartQuiz: () => {\n      setTime(performance.now());\n    },\n    onEndQuiz: () => {\n      setTime((startTime) => performance.now() - startTime);\n    },\n    onResetQuiz: () => {\n      setTime(0);\n      setCorrectAnswers(0);\n    },\n  });\n\n  const onCorrectAnswer = () => {\n    setCorrectAnswers(correctAnswers + 1);\n  };\n\n  return (\n    <StatsContext.Provider\n      value={[{ time, correctAnswers }, { onCorrectAnswer }]}\n    >\n      {children}\n    </StatsContext.Provider>\n  );\n}\n\nexport function useStats() {\n  const context = useContext(StatsContext);\n  if (context === undefined) {\n    throw new Error(\"useStats must be within a StatsProvider\");\n  }\n  return context;\n}\n","import React, { useState } from \"react\";\nimport Question from \"./components/question/question.component\";\nimport { useQuiz } from \"../../hooks/use-quiz\";\nimport { useStats } from \"../../hooks/use-stats\";\nimport \"./questions.styles.scss\";\n\nconst shuffle = (a) => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n\nfunction getCurrentQuestion(questions, index) {\n  const {\n    question: questionContent,\n    correct_answer: correctAnswer,\n    incorrect_answers: incorrectAnswers,\n  } = questions[index];\n\n  const allAnswers = shuffle([correctAnswer].concat(incorrectAnswers));\n\n  return {\n    questionContent,\n    allAnswers,\n    correctAnswer,\n    incorrectAnswers,\n  };\n}\n\nexport default function Questions() {\n  const [{ questions }, { onEndQuiz }] = useQuiz();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  const { questionContent, allAnswers, correctAnswer } = getCurrentQuestion(\n    questions,\n    currentQuestionIndex\n  );\n\n  const [, { onCorrectAnswer }] = useStats();\n\n  const handleClickAnswer = (answer) => {\n    if (answer === correctAnswer) {\n      onCorrectAnswer();\n    }\n\n    if (currentQuestionIndex === questions.length - 1) {\n      onEndQuiz();\n    } else {\n      setCurrentQuestionIndex((prev) => prev + 1);\n    }\n  };\n\n  return (\n    <div className=\"question-page\">\n      <div className=\"header\">\n        {currentQuestionIndex + \"/\" + questions.length}\n      </div>\n\n      <Question\n        text={questionContent}\n        answers={allAnswers}\n        onClickAnswer={handleClickAnswer}\n      />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useQuiz } from \"../../hooks/use-quiz\";\nimport { useStats } from \"../../hooks/use-stats\";\nimport \"./results.styles.scss\";\n\nconst millisToMinutesAndSeconds = (millis) => {\n  const minutes = Math.floor(millis / 60000);\n  const seconds = ((millis % 60000) / 1000).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n};\n\nexport default function ResultsPage() {\n  const [completedTimes, setCompletedTimes] = useState(0);\n\n  const [{ questions }, { onStartQuiz }] = useQuiz({\n    onEndQuiz: () => {\n      setCompletedTimes((prev) => prev + 1);\n    },\n  });\n\n  const [{ correctAnswers, time }] = useStats();\n\n  const showStats = completedTimes > 0;\n\n  return (\n    <div className=\"results-page\">\n      {showStats && (\n        <>\n          <div className=\"stat\">\n            Correct answers: {`${correctAnswers}/${questions.length}`}\n          </div>\n          <div className=\"stat\">\n            Time: {`${millisToMinutesAndSeconds(time)}`}\n          </div>\n        </>\n      )}\n\n      <button className=\"start-button\" onClick={onStartQuiz}>\n        Start Quiz\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport Questions from \"./pages/questions/questions.component\";\nimport Results from \"./pages/results/results.component\";\n\nimport { useQuiz } from \"./hooks/use-quiz\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [started, setStarted] = useState(false);\n\n  const [{ pending }] = useQuiz({\n    onStartQuiz: () => {\n      setStarted(true);\n    },\n    onEndQuiz: () => {\n      setStarted(false);\n    },\n  });\n\n  if (pending) {\n    return <div className=\"App\">loading</div>;\n  }\n\n  return <div className=\"App\">{started ? <Questions /> : <Results />}</div>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { QuizProvider } from \"./hooks/use-quiz\";\nimport { StatsProvider } from \"./hooks/use-stats\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuizProvider>\n      <StatsProvider>\n        <App />\n      </StatsProvider>\n    </QuizProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}